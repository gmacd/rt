package maths

import (
	"math"
)

type Mat [4][4]float32

func NewMat(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p float32) Mat {
	return Mat{
		{a, b, c, d},
		{e, f, g, h},
		{i, j, k, l},
		{m, n, o, p}}
}

func NewMatIdent() Mat {
	return Mat{
		{1.0, 0.0, 0.0, 0.0},
		{0.0, 1.0, 0.0, 0.0},
		{0.0, 0.0, 1.0, 0.0},
		{0.0, 0.0, 0.0, 1.0}}
}

func NewMatScale(x, y, z float32) Mat {
	return Mat{
		{x, 0.0, 0.0, 0.0},
		{0.0, y, 0.0, 0.0},
		{0.0, 0.0, z, 0.0},
		{0.0, 0.0, 0.0, 1.0}}
}

// Left-handed (z into screen is +ve, y up is +ve, x right is +ve
func NewMatPerspective(fov, near, far float32) Mat {
	// TODO Optimize to build mat directly
	i33 := far / (far - near)
	i34 := i33 * -near
	perspMat := Mat{
		{1.0, 0.0, 0.0, 0.0},
		{0.0, 1.0, 0.0, 0.0},
		{0.0, 0.0, i33, i34},
		{0.0, 0.0, 1.0, 0.0}}

	invTanAngle := float32(1.0 / math.Tan(float64(DegToRad(fov)/2.0)))
	scaleMat := NewMatScale(invTanAngle, invTanAngle, 1)
	return scaleMat.Mul(&perspMat)
}

func (m1 *Mat) Mul(m2 *Mat) Mat {
	return Mat{
		{m1[0][0]*m2[0][0] + m1[1][0]*m2[0][1] + m1[2][0]*m2[0][2] + m1[3][0]*m2[0][3],
		 m1[0][1]*m2[0][0] + m1[1][1]*m2[0][1] + m1[2][1]*m2[0][2] + m1[3][1]*m2[0][3],
		 m1[0][2]*m2[0][0] + m1[1][2]*m2[0][1] + m1[2][2]*m2[0][2] + m1[3][2]*m2[0][3],
		 m1[0][3]*m2[0][0] + m1[1][3]*m2[0][1] + m1[2][3]*m2[0][2] + m1[3][3]*m2[0][3],},
		 
		{m1[0][0]*m2[1][0] + m1[1][0]*m2[1][1] + m1[2][0]*m2[1][2] + m1[3][0]*m2[1][3],
		 m1[0][1]*m2[1][0] + m1[1][1]*m2[1][1] + m1[2][1]*m2[1][2] + m1[3][1]*m2[1][3],
		 m1[0][2]*m2[1][0] + m1[1][2]*m2[1][1] + m1[2][2]*m2[1][2] + m1[3][2]*m2[1][3],
		 m1[0][3]*m2[1][0] + m1[1][3]*m2[1][1] + m1[2][3]*m2[1][2] + m1[3][3]*m2[1][3],},
		 
		{m1[0][0]*m2[2][0] + m1[1][0]*m2[2][1] + m1[2][0]*m2[2][2] + m1[3][0]*m2[2][3],
		 m1[0][1]*m2[2][0] + m1[1][1]*m2[2][1] + m1[2][1]*m2[2][2] + m1[3][1]*m2[2][3],
		 m1[0][2]*m2[2][0] + m1[1][2]*m2[2][1] + m1[2][2]*m2[2][2] + m1[3][2]*m2[2][3],
		 m1[0][3]*m2[2][0] + m1[1][3]*m2[2][1] + m1[2][3]*m2[2][2] + m1[3][3]*m2[2][3],},
		 
		{m1[0][0]*m2[3][0] + m1[1][0]*m2[3][1] + m1[2][0]*m2[3][2] + m1[3][0]*m2[3][3],
		 m1[0][1]*m2[3][0] + m1[1][1]*m2[3][1] + m1[2][1]*m2[3][2] + m1[3][1]*m2[3][3],
		 m1[0][2]*m2[3][0] + m1[1][2]*m2[3][1] + m1[2][2]*m2[3][2] + m1[3][2]*m2[3][3],
		 m1[0][3]*m2[3][0] + m1[1][3]*m2[3][1] + m1[2][3]*m2[3][2] + m1[3][3]*m2[3][3],},
	}
}
